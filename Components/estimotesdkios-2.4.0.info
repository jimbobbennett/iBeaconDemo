{"Name":"Estimote SDK for iOS","Id":1573,"Alias":"estimotesdkios","Description":"This component binds the Estimote SDK for iOS so that it may be used in Xamarin.iOS projects to scan for iBeacons and Estimote Stickers.\n\nThe system requirements are iOS 7+ and Bluetooth Low Energy.\n\nIn your app’s AppDelegate on FinishedLaunching you can specify your Estimote app config:\n```csharp\nConfig.SetupAppID (“appId”, “appToken”);\n```\n\n**On iOS 8**\nYou must specify `NSLocationAlwaysUsageDescription` or `NSLocationWhenInUseUsageDescription` in you info.plst file with a description that will be prompted to your users. Additionally, you must call the BeaconManager\u0027s `RequestAlwaysAuthorization` or `RequestWhenInUseAuthorization` methods. Please see sample for use.\n\n\nThe `BeaconManager` class is the primary means of interacting with Estimotes. Create an instance of this class, and use the `StartRandingBeacons` method, passing it `BeaconRegion`. You can then subscribe to the `RangedBeacons` event when a beacon is found.\n\nThe following code shows an example of how to use the `BeaconManager` to range for beacons.\n\n```csharp\nBeaconManager beaconManager;\nBeaconRegion region;\n\npublic async override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\tthis.Title = \"Select Beacon\";\n\tbeaconManager = new BeaconManager ();\n\tbeaconManager.ReturnAllRangedBeaconsAtOnce = true;\n\tvar uuid = new NSUuid (\"8492E75F-4FD6-469D-B132-043FE94921D8\");\n\tregion = new BeaconRegion (uuid, \"BeaconSample\");\n\tbeaconManager.StartRangingBeacons(region);\n\tbeaconManager.RangedBeacons += (sender, e) =\u003e \n\t{\n\t\tnew UIAlertView(\"Beacons Found\", \"Just found: \" + e.Beacons.Length + \" beacons.\", null, \"OK\").Show();\n\t};\n}\n```\n\nThe Estimote SDK for iOS can also be used with Estimote Stickers. Here is an example of using the `NearableManager` to range for wearables.\n\n**On iOS 8**\nYou must specify `NSLocationAlwaysUsageDescription` or `NSLocationWhenInUseUsageDescription` in you info.plst file with a description that will be prompted to your users. \n\n```csharp\nNearableManager manager;\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n\tTableView.WeakDataSource = this;\n\tTableView.WeakDelegate = this;\n\n\tmanager = new NearableManager ();\n\n\tmanager.RangedNearables += (sender, e) =\u003e \n\t{\n\t\tnew UIAlertView(\"Nearables Found\", \"Just found: \" + e.Nearables.Length + \" nearables.\", null, \"OK\").Show();\n\t};\n\n\tmanager.StartRanging (NearableType.All);\n}\n\n```","Version":"2.4.0","Summary":"Estimote SDK for Xamarin.iOS enables ranging and monitoring iBeacons and Estimote Nearables.","QuickStart":"## Configuration\nIn your app’s AppDelegate on FinishedLaunching you can specify your Estimote app config:\n```csharp\nConfig.SetupAppID (“appId”, “appToken”);\n```\n\n**iOS8**\nYou must specify `NSLocationAlwaysUsageDescription` or `NSLocationWhenInUseUsageDescription` in you info.plst file with a description that will be prompted to your users. Additionally, you must call the BeaconManager\u0027s `RequestAlwaysAuthorization` or `RequestWhenInUseAuthorization` methods. \n\n## iBeacons\n\nThe following code shows an example of how to use the `BeaconManager` to range for beacons.\n\n```csharp\nBeaconManager beaconManager;\nBeaconRegion region;\n\npublic async override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\tthis.Title = \"Select Beacon\";\n\tbeaconManager = new BeaconManager ();\n\tbeaconManager.ReturnAllRangedBeaconsAtOnce = true;\n\tvar uuid = new NSUuid (\"8492E75F-4FD6-469D-B132-043FE94921D8\");\n\tregion = new BeaconRegion (uuid, \"BeaconSample\");\n\tbeaconManager.StartRangingBeacons(region);\n\tbeaconManager.RangedBeacons += (sender, e) =\u003e \n\t{\n\t\tnew UIAlertView(\"Beacons Found\", \"Just found: \" + e.Beacons.Length + \" beacons.\", null, \"OK\").Show();\n\t};\n}\n```\n\n\n### Authorization\nYou can use the Estimote SDK for iOS to request authorization:\n\nYou can subscribe to authorazation changes on the BeaconManager:\n\n```csharp\nbeaconManager.AuthorizationStatusChanged += (sender, e) =\u003e \n{\n\tStartRangingBeacons();\n};\n```\n\nAdditionally, you can request authorization with:\n\n```\nprivate void StartRangingBeacons()\n{\n\tvar status = BeaconManager.AuthorizationStatus ();\n\tif (status == CLAuthorizationStatus.NotDetermined)\n\t{\n\t\tif (!UIDevice.CurrentDevice.CheckSystemVersion(8, 0)) {\n\n\t\t\tbeaconManager.StartRangingBeacons(region);\n\t\t} else {\n\n\t\t\tbeaconManager.RequestAlwaysAuthorization ();\n\t\t}\n\t}\n\telse if(status == CLAuthorizationStatus.Authorized)\n\t{\n\t\tbeaconManager.StartRangingBeacons(region);\n\t}\n\telse if(status == CLAuthorizationStatus.Denied)\n\t{\n\t\tnew UIAlertView (\"Access Denied\", \"You have denied access to location services. Change this in app settings.\", null, \"OK\").Show ();\n\t}\n\telse if(status == CLAuthorizationStatus.Restricted)\n\t{\n\t\tnew UIAlertView (\"Location Not Available\", \"You have no access to location services.\", null, \"OK\").Show ();\n\t}\n}\n```\n\n\n\n## Nearables\nThe Estimote SDK for iOS can also be used with Estimote Stickers. Here is an example of using the `NearableManager` to range for wearables.\n\n**On iOS 8**\nYou must specify `NSLocationAlwaysUsageDescription` or `NSLocationWhenInUseUsageDescription` in you info.plst file with a description that will be prompted to your users. \n\n```csharp\nNearableManager manager;\npublic override void ViewDidLoad ()\n{\n\tbase.ViewDidLoad ();\n\n\tTableView.WeakDataSource = this;\n\tTableView.WeakDelegate = this;\n\n\tmanager = new NearableManager ();\n\n\tmanager.RangedNearables += (sender, e) =\u003e \n\t{\n\t\tnew UIAlertView(\"Nearables Found\", \"Just found: \" + e.Nearables.Length + \" nearables.\", null, \"OK\").Show();\n\t};\n\n\tmanager.StartRanging (NearableType.All);\n}\n\n```\n","Hash":"8ebada4721b503851951c53780db8d4b","TargetPlatforms":["ios"],"TrialHash":null}